package chap06

/**
 * 문제 : 특정 조건을 만족시키는 데 필요한 최소량의 데이터만 처리하고 싶다
 * 해법 : 코틀린 시퀀스를 쇼트 서킷 함수와 함께 사용한다
 *
 */

fun main() {
    /* 100부터 200까지의 숫자를 각각 2배로 만든 다음 3으로 나누어 떨어지는 첫 번째 값을 찾고싶다 */
    // 3으로 나누어지는 첫 번째 배수 찾기 (버전 1)
    (100 until 200).map { it * 2 }
        .filter { it % 3 == 0 }
        .first()
    // 위의 코드는 100개의 계산을 하개되고 filter에서 또 다른 100개를 계산하게 된다

    // 3으로 나누어지는 첫 번째 배수 찾기 (버전 2)
    (100 until 200).map { it * 2 }
        .filter { it % 3 == 0 }
    // 100개의 계산 후 오직 3개의 연산만 시행한다.

    // 3으로 나누어지는 첫 번째 배수 찾기 (최적의 방법)
    (100 until 2_000_000).asSequence()
        .map { println("doubling $it"); it * 2 }
        .filter { println("filtering $it"); it % 3 ==0  }
        .first() // 범위를 시퀀스로 변경해서 올바른 답을 리턴하기 전까지 오직 6개의 연산만을 수행한다
    /**
     * 시퀀스 API는 컬렉션에 들어있는 함수와 똑같은 함수를 가지고 잇지만 시퀀스에 대한 연산은
     * 중간 연산과 최종 연산이라는 범주로 나뉜다. map과 filter같은 중간 연산은 새로운 시퀀스를 리턴한다.
     * first 또는 toList같은 최종 연산은 시퀀스가 아닌 다른 것을 리턴한다.
     * 중요한 점은 최종 연산 없이는 시퀀스가 데이터를 처리하지 않는다는 것이다.
     * 자바 스트림과는 다르게 코틀린의 일부 시퀀스는 여러 번 순회할 수 있고 그렇지 못한 시퀀스는
     * 여러번 순회가 불가능하다.
     */
}